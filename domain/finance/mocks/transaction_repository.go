// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"finance/domain/entities"
	"sync"
	"time"
)

// TransactionRepositoryMock is a mock implementation of finance.TransactionRepository.
//
//	func TestSomethingThatUsesTransactionRepository(t *testing.T) {
//
//		// make and configure a mocked finance.TransactionRepository
//		mockedTransactionRepository := &TransactionRepositoryMock{
//			CreateTransactionFunc: func(ctx context.Context, transaction entities.Transaction) (entities.Transaction, error) {
//				panic("mock out the CreateTransaction method")
//			},
//			DeleteTransactionFunc: func(ctx context.Context, id string) error {
//				panic("mock out the DeleteTransaction method")
//			},
//			GetAllTransactionsFunc: func(ctx context.Context) ([]entities.Transaction, error) {
//				panic("mock out the GetAllTransactions method")
//			},
//			GetTransactionByIDFunc: func(ctx context.Context, id string) (entities.Transaction, error) {
//				panic("mock out the GetTransactionByID method")
//			},
//			GetTransactionWithDetailsFunc: func(ctx context.Context, id string) (entities.Transaction, error) {
//				panic("mock out the GetTransactionWithDetails method")
//			},
//			GetTransactionsByAccountFunc: func(ctx context.Context, accountID string) ([]entities.Transaction, error) {
//				panic("mock out the GetTransactionsByAccount method")
//			},
//			GetTransactionsByAccountAndDateRangeFunc: func(ctx context.Context, accountID string, startDate time.Time, endDate time.Time) ([]entities.Transaction, error) {
//				panic("mock out the GetTransactionsByAccountAndDateRange method")
//			},
//			GetTransactionsByCategoryFunc: func(ctx context.Context, categoryID string) ([]entities.Transaction, error) {
//				panic("mock out the GetTransactionsByCategory method")
//			},
//			GetTransactionsByDateRangeFunc: func(ctx context.Context, startDate time.Time, endDate time.Time) ([]entities.Transaction, error) {
//				panic("mock out the GetTransactionsByDateRange method")
//			},
//			GetTransactionsWithDetailsFunc: func(ctx context.Context, limit int, offset int) ([]entities.Transaction, error) {
//				panic("mock out the GetTransactionsWithDetails method")
//			},
//			UpdateTransactionFunc: func(ctx context.Context, transaction entities.Transaction) (entities.Transaction, error) {
//				panic("mock out the UpdateTransaction method")
//			},
//			UpdateTransactionStatusFunc: func(ctx context.Context, id string, status entities.TransactionStatus) (entities.Transaction, error) {
//				panic("mock out the UpdateTransactionStatus method")
//			},
//		}
//
//		// use mockedTransactionRepository in code that requires finance.TransactionRepository
//		// and then make assertions.
//
//	}
type TransactionRepositoryMock struct {
	// CreateTransactionFunc mocks the CreateTransaction method.
	CreateTransactionFunc func(ctx context.Context, transaction entities.Transaction) (entities.Transaction, error)

	// DeleteTransactionFunc mocks the DeleteTransaction method.
	DeleteTransactionFunc func(ctx context.Context, id string) error

	// GetAllTransactionsFunc mocks the GetAllTransactions method.
	GetAllTransactionsFunc func(ctx context.Context) ([]entities.Transaction, error)

	// GetTransactionByIDFunc mocks the GetTransactionByID method.
	GetTransactionByIDFunc func(ctx context.Context, id string) (entities.Transaction, error)

	// GetTransactionWithDetailsFunc mocks the GetTransactionWithDetails method.
	GetTransactionWithDetailsFunc func(ctx context.Context, id string) (entities.Transaction, error)

	// GetTransactionsByAccountFunc mocks the GetTransactionsByAccount method.
	GetTransactionsByAccountFunc func(ctx context.Context, accountID string) ([]entities.Transaction, error)

	// GetTransactionsByAccountAndDateRangeFunc mocks the GetTransactionsByAccountAndDateRange method.
	GetTransactionsByAccountAndDateRangeFunc func(ctx context.Context, accountID string, startDate time.Time, endDate time.Time) ([]entities.Transaction, error)

	// GetTransactionsByCategoryFunc mocks the GetTransactionsByCategory method.
	GetTransactionsByCategoryFunc func(ctx context.Context, categoryID string) ([]entities.Transaction, error)

	// GetTransactionsByDateRangeFunc mocks the GetTransactionsByDateRange method.
	GetTransactionsByDateRangeFunc func(ctx context.Context, startDate time.Time, endDate time.Time) ([]entities.Transaction, error)

	// GetTransactionsWithDetailsFunc mocks the GetTransactionsWithDetails method.
	GetTransactionsWithDetailsFunc func(ctx context.Context, limit int, offset int) ([]entities.Transaction, error)

	// UpdateTransactionFunc mocks the UpdateTransaction method.
	UpdateTransactionFunc func(ctx context.Context, transaction entities.Transaction) (entities.Transaction, error)

	// UpdateTransactionStatusFunc mocks the UpdateTransactionStatus method.
	UpdateTransactionStatusFunc func(ctx context.Context, id string, status entities.TransactionStatus) (entities.Transaction, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateTransaction holds details about calls to the CreateTransaction method.
		CreateTransaction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Transaction is the transaction argument value.
			Transaction entities.Transaction
		}
		// DeleteTransaction holds details about calls to the DeleteTransaction method.
		DeleteTransaction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetAllTransactions holds details about calls to the GetAllTransactions method.
		GetAllTransactions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetTransactionByID holds details about calls to the GetTransactionByID method.
		GetTransactionByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetTransactionWithDetails holds details about calls to the GetTransactionWithDetails method.
		GetTransactionWithDetails []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetTransactionsByAccount holds details about calls to the GetTransactionsByAccount method.
		GetTransactionsByAccount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
		}
		// GetTransactionsByAccountAndDateRange holds details about calls to the GetTransactionsByAccountAndDateRange method.
		GetTransactionsByAccountAndDateRange []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// StartDate is the startDate argument value.
			StartDate time.Time
			// EndDate is the endDate argument value.
			EndDate time.Time
		}
		// GetTransactionsByCategory holds details about calls to the GetTransactionsByCategory method.
		GetTransactionsByCategory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CategoryID is the categoryID argument value.
			CategoryID string
		}
		// GetTransactionsByDateRange holds details about calls to the GetTransactionsByDateRange method.
		GetTransactionsByDateRange []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// StartDate is the startDate argument value.
			StartDate time.Time
			// EndDate is the endDate argument value.
			EndDate time.Time
		}
		// GetTransactionsWithDetails holds details about calls to the GetTransactionsWithDetails method.
		GetTransactionsWithDetails []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Limit is the limit argument value.
			Limit int
			// Offset is the offset argument value.
			Offset int
		}
		// UpdateTransaction holds details about calls to the UpdateTransaction method.
		UpdateTransaction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Transaction is the transaction argument value.
			Transaction entities.Transaction
		}
		// UpdateTransactionStatus holds details about calls to the UpdateTransactionStatus method.
		UpdateTransactionStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// Status is the status argument value.
			Status entities.TransactionStatus
		}
	}
	lockCreateTransaction                    sync.RWMutex
	lockDeleteTransaction                    sync.RWMutex
	lockGetAllTransactions                   sync.RWMutex
	lockGetTransactionByID                   sync.RWMutex
	lockGetTransactionWithDetails            sync.RWMutex
	lockGetTransactionsByAccount             sync.RWMutex
	lockGetTransactionsByAccountAndDateRange sync.RWMutex
	lockGetTransactionsByCategory            sync.RWMutex
	lockGetTransactionsByDateRange           sync.RWMutex
	lockGetTransactionsWithDetails           sync.RWMutex
	lockUpdateTransaction                    sync.RWMutex
	lockUpdateTransactionStatus              sync.RWMutex
}

// CreateTransaction calls CreateTransactionFunc.
func (mock *TransactionRepositoryMock) CreateTransaction(ctx context.Context, transaction entities.Transaction) (entities.Transaction, error) {
	callInfo := struct {
		Ctx         context.Context
		Transaction entities.Transaction
	}{
		Ctx:         ctx,
		Transaction: transaction,
	}
	mock.lockCreateTransaction.Lock()
	mock.calls.CreateTransaction = append(mock.calls.CreateTransaction, callInfo)
	mock.lockCreateTransaction.Unlock()
	if mock.CreateTransactionFunc == nil {
		var (
			transactionOut entities.Transaction
			errOut         error
		)
		return transactionOut, errOut
	}
	return mock.CreateTransactionFunc(ctx, transaction)
}

// CreateTransactionCalls gets all the calls that were made to CreateTransaction.
// Check the length with:
//
//	len(mockedTransactionRepository.CreateTransactionCalls())
func (mock *TransactionRepositoryMock) CreateTransactionCalls() []struct {
	Ctx         context.Context
	Transaction entities.Transaction
} {
	var calls []struct {
		Ctx         context.Context
		Transaction entities.Transaction
	}
	mock.lockCreateTransaction.RLock()
	calls = mock.calls.CreateTransaction
	mock.lockCreateTransaction.RUnlock()
	return calls
}

// DeleteTransaction calls DeleteTransactionFunc.
func (mock *TransactionRepositoryMock) DeleteTransaction(ctx context.Context, id string) error {
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteTransaction.Lock()
	mock.calls.DeleteTransaction = append(mock.calls.DeleteTransaction, callInfo)
	mock.lockDeleteTransaction.Unlock()
	if mock.DeleteTransactionFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeleteTransactionFunc(ctx, id)
}

// DeleteTransactionCalls gets all the calls that were made to DeleteTransaction.
// Check the length with:
//
//	len(mockedTransactionRepository.DeleteTransactionCalls())
func (mock *TransactionRepositoryMock) DeleteTransactionCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockDeleteTransaction.RLock()
	calls = mock.calls.DeleteTransaction
	mock.lockDeleteTransaction.RUnlock()
	return calls
}

// GetAllTransactions calls GetAllTransactionsFunc.
func (mock *TransactionRepositoryMock) GetAllTransactions(ctx context.Context) ([]entities.Transaction, error) {
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAllTransactions.Lock()
	mock.calls.GetAllTransactions = append(mock.calls.GetAllTransactions, callInfo)
	mock.lockGetAllTransactions.Unlock()
	if mock.GetAllTransactionsFunc == nil {
		var (
			transactionsOut []entities.Transaction
			errOut          error
		)
		return transactionsOut, errOut
	}
	return mock.GetAllTransactionsFunc(ctx)
}

// GetAllTransactionsCalls gets all the calls that were made to GetAllTransactions.
// Check the length with:
//
//	len(mockedTransactionRepository.GetAllTransactionsCalls())
func (mock *TransactionRepositoryMock) GetAllTransactionsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAllTransactions.RLock()
	calls = mock.calls.GetAllTransactions
	mock.lockGetAllTransactions.RUnlock()
	return calls
}

// GetTransactionByID calls GetTransactionByIDFunc.
func (mock *TransactionRepositoryMock) GetTransactionByID(ctx context.Context, id string) (entities.Transaction, error) {
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetTransactionByID.Lock()
	mock.calls.GetTransactionByID = append(mock.calls.GetTransactionByID, callInfo)
	mock.lockGetTransactionByID.Unlock()
	if mock.GetTransactionByIDFunc == nil {
		var (
			transactionOut entities.Transaction
			errOut         error
		)
		return transactionOut, errOut
	}
	return mock.GetTransactionByIDFunc(ctx, id)
}

// GetTransactionByIDCalls gets all the calls that were made to GetTransactionByID.
// Check the length with:
//
//	len(mockedTransactionRepository.GetTransactionByIDCalls())
func (mock *TransactionRepositoryMock) GetTransactionByIDCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetTransactionByID.RLock()
	calls = mock.calls.GetTransactionByID
	mock.lockGetTransactionByID.RUnlock()
	return calls
}

// GetTransactionWithDetails calls GetTransactionWithDetailsFunc.
func (mock *TransactionRepositoryMock) GetTransactionWithDetails(ctx context.Context, id string) (entities.Transaction, error) {
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetTransactionWithDetails.Lock()
	mock.calls.GetTransactionWithDetails = append(mock.calls.GetTransactionWithDetails, callInfo)
	mock.lockGetTransactionWithDetails.Unlock()
	if mock.GetTransactionWithDetailsFunc == nil {
		var (
			transactionOut entities.Transaction
			errOut         error
		)
		return transactionOut, errOut
	}
	return mock.GetTransactionWithDetailsFunc(ctx, id)
}

// GetTransactionWithDetailsCalls gets all the calls that were made to GetTransactionWithDetails.
// Check the length with:
//
//	len(mockedTransactionRepository.GetTransactionWithDetailsCalls())
func (mock *TransactionRepositoryMock) GetTransactionWithDetailsCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetTransactionWithDetails.RLock()
	calls = mock.calls.GetTransactionWithDetails
	mock.lockGetTransactionWithDetails.RUnlock()
	return calls
}

// GetTransactionsByAccount calls GetTransactionsByAccountFunc.
func (mock *TransactionRepositoryMock) GetTransactionsByAccount(ctx context.Context, accountID string) ([]entities.Transaction, error) {
	callInfo := struct {
		Ctx       context.Context
		AccountID string
	}{
		Ctx:       ctx,
		AccountID: accountID,
	}
	mock.lockGetTransactionsByAccount.Lock()
	mock.calls.GetTransactionsByAccount = append(mock.calls.GetTransactionsByAccount, callInfo)
	mock.lockGetTransactionsByAccount.Unlock()
	if mock.GetTransactionsByAccountFunc == nil {
		var (
			transactionsOut []entities.Transaction
			errOut          error
		)
		return transactionsOut, errOut
	}
	return mock.GetTransactionsByAccountFunc(ctx, accountID)
}

// GetTransactionsByAccountCalls gets all the calls that were made to GetTransactionsByAccount.
// Check the length with:
//
//	len(mockedTransactionRepository.GetTransactionsByAccountCalls())
func (mock *TransactionRepositoryMock) GetTransactionsByAccountCalls() []struct {
	Ctx       context.Context
	AccountID string
} {
	var calls []struct {
		Ctx       context.Context
		AccountID string
	}
	mock.lockGetTransactionsByAccount.RLock()
	calls = mock.calls.GetTransactionsByAccount
	mock.lockGetTransactionsByAccount.RUnlock()
	return calls
}

// GetTransactionsByAccountAndDateRange calls GetTransactionsByAccountAndDateRangeFunc.
func (mock *TransactionRepositoryMock) GetTransactionsByAccountAndDateRange(ctx context.Context, accountID string, startDate time.Time, endDate time.Time) ([]entities.Transaction, error) {
	callInfo := struct {
		Ctx       context.Context
		AccountID string
		StartDate time.Time
		EndDate   time.Time
	}{
		Ctx:       ctx,
		AccountID: accountID,
		StartDate: startDate,
		EndDate:   endDate,
	}
	mock.lockGetTransactionsByAccountAndDateRange.Lock()
	mock.calls.GetTransactionsByAccountAndDateRange = append(mock.calls.GetTransactionsByAccountAndDateRange, callInfo)
	mock.lockGetTransactionsByAccountAndDateRange.Unlock()
	if mock.GetTransactionsByAccountAndDateRangeFunc == nil {
		var (
			transactionsOut []entities.Transaction
			errOut          error
		)
		return transactionsOut, errOut
	}
	return mock.GetTransactionsByAccountAndDateRangeFunc(ctx, accountID, startDate, endDate)
}

// GetTransactionsByAccountAndDateRangeCalls gets all the calls that were made to GetTransactionsByAccountAndDateRange.
// Check the length with:
//
//	len(mockedTransactionRepository.GetTransactionsByAccountAndDateRangeCalls())
func (mock *TransactionRepositoryMock) GetTransactionsByAccountAndDateRangeCalls() []struct {
	Ctx       context.Context
	AccountID string
	StartDate time.Time
	EndDate   time.Time
} {
	var calls []struct {
		Ctx       context.Context
		AccountID string
		StartDate time.Time
		EndDate   time.Time
	}
	mock.lockGetTransactionsByAccountAndDateRange.RLock()
	calls = mock.calls.GetTransactionsByAccountAndDateRange
	mock.lockGetTransactionsByAccountAndDateRange.RUnlock()
	return calls
}

// GetTransactionsByCategory calls GetTransactionsByCategoryFunc.
func (mock *TransactionRepositoryMock) GetTransactionsByCategory(ctx context.Context, categoryID string) ([]entities.Transaction, error) {
	callInfo := struct {
		Ctx        context.Context
		CategoryID string
	}{
		Ctx:        ctx,
		CategoryID: categoryID,
	}
	mock.lockGetTransactionsByCategory.Lock()
	mock.calls.GetTransactionsByCategory = append(mock.calls.GetTransactionsByCategory, callInfo)
	mock.lockGetTransactionsByCategory.Unlock()
	if mock.GetTransactionsByCategoryFunc == nil {
		var (
			transactionsOut []entities.Transaction
			errOut          error
		)
		return transactionsOut, errOut
	}
	return mock.GetTransactionsByCategoryFunc(ctx, categoryID)
}

// GetTransactionsByCategoryCalls gets all the calls that were made to GetTransactionsByCategory.
// Check the length with:
//
//	len(mockedTransactionRepository.GetTransactionsByCategoryCalls())
func (mock *TransactionRepositoryMock) GetTransactionsByCategoryCalls() []struct {
	Ctx        context.Context
	CategoryID string
} {
	var calls []struct {
		Ctx        context.Context
		CategoryID string
	}
	mock.lockGetTransactionsByCategory.RLock()
	calls = mock.calls.GetTransactionsByCategory
	mock.lockGetTransactionsByCategory.RUnlock()
	return calls
}

// GetTransactionsByDateRange calls GetTransactionsByDateRangeFunc.
func (mock *TransactionRepositoryMock) GetTransactionsByDateRange(ctx context.Context, startDate time.Time, endDate time.Time) ([]entities.Transaction, error) {
	callInfo := struct {
		Ctx       context.Context
		StartDate time.Time
		EndDate   time.Time
	}{
		Ctx:       ctx,
		StartDate: startDate,
		EndDate:   endDate,
	}
	mock.lockGetTransactionsByDateRange.Lock()
	mock.calls.GetTransactionsByDateRange = append(mock.calls.GetTransactionsByDateRange, callInfo)
	mock.lockGetTransactionsByDateRange.Unlock()
	if mock.GetTransactionsByDateRangeFunc == nil {
		var (
			transactionsOut []entities.Transaction
			errOut          error
		)
		return transactionsOut, errOut
	}
	return mock.GetTransactionsByDateRangeFunc(ctx, startDate, endDate)
}

// GetTransactionsByDateRangeCalls gets all the calls that were made to GetTransactionsByDateRange.
// Check the length with:
//
//	len(mockedTransactionRepository.GetTransactionsByDateRangeCalls())
func (mock *TransactionRepositoryMock) GetTransactionsByDateRangeCalls() []struct {
	Ctx       context.Context
	StartDate time.Time
	EndDate   time.Time
} {
	var calls []struct {
		Ctx       context.Context
		StartDate time.Time
		EndDate   time.Time
	}
	mock.lockGetTransactionsByDateRange.RLock()
	calls = mock.calls.GetTransactionsByDateRange
	mock.lockGetTransactionsByDateRange.RUnlock()
	return calls
}

// GetTransactionsWithDetails calls GetTransactionsWithDetailsFunc.
func (mock *TransactionRepositoryMock) GetTransactionsWithDetails(ctx context.Context, limit int, offset int) ([]entities.Transaction, error) {
	callInfo := struct {
		Ctx    context.Context
		Limit  int
		Offset int
	}{
		Ctx:    ctx,
		Limit:  limit,
		Offset: offset,
	}
	mock.lockGetTransactionsWithDetails.Lock()
	mock.calls.GetTransactionsWithDetails = append(mock.calls.GetTransactionsWithDetails, callInfo)
	mock.lockGetTransactionsWithDetails.Unlock()
	if mock.GetTransactionsWithDetailsFunc == nil {
		var (
			transactionsOut []entities.Transaction
			errOut          error
		)
		return transactionsOut, errOut
	}
	return mock.GetTransactionsWithDetailsFunc(ctx, limit, offset)
}

// GetTransactionsWithDetailsCalls gets all the calls that were made to GetTransactionsWithDetails.
// Check the length with:
//
//	len(mockedTransactionRepository.GetTransactionsWithDetailsCalls())
func (mock *TransactionRepositoryMock) GetTransactionsWithDetailsCalls() []struct {
	Ctx    context.Context
	Limit  int
	Offset int
} {
	var calls []struct {
		Ctx    context.Context
		Limit  int
		Offset int
	}
	mock.lockGetTransactionsWithDetails.RLock()
	calls = mock.calls.GetTransactionsWithDetails
	mock.lockGetTransactionsWithDetails.RUnlock()
	return calls
}

// UpdateTransaction calls UpdateTransactionFunc.
func (mock *TransactionRepositoryMock) UpdateTransaction(ctx context.Context, transaction entities.Transaction) (entities.Transaction, error) {
	callInfo := struct {
		Ctx         context.Context
		Transaction entities.Transaction
	}{
		Ctx:         ctx,
		Transaction: transaction,
	}
	mock.lockUpdateTransaction.Lock()
	mock.calls.UpdateTransaction = append(mock.calls.UpdateTransaction, callInfo)
	mock.lockUpdateTransaction.Unlock()
	if mock.UpdateTransactionFunc == nil {
		var (
			transactionOut entities.Transaction
			errOut         error
		)
		return transactionOut, errOut
	}
	return mock.UpdateTransactionFunc(ctx, transaction)
}

// UpdateTransactionCalls gets all the calls that were made to UpdateTransaction.
// Check the length with:
//
//	len(mockedTransactionRepository.UpdateTransactionCalls())
func (mock *TransactionRepositoryMock) UpdateTransactionCalls() []struct {
	Ctx         context.Context
	Transaction entities.Transaction
} {
	var calls []struct {
		Ctx         context.Context
		Transaction entities.Transaction
	}
	mock.lockUpdateTransaction.RLock()
	calls = mock.calls.UpdateTransaction
	mock.lockUpdateTransaction.RUnlock()
	return calls
}

// UpdateTransactionStatus calls UpdateTransactionStatusFunc.
func (mock *TransactionRepositoryMock) UpdateTransactionStatus(ctx context.Context, id string, status entities.TransactionStatus) (entities.Transaction, error) {
	callInfo := struct {
		Ctx    context.Context
		ID     string
		Status entities.TransactionStatus
	}{
		Ctx:    ctx,
		ID:     id,
		Status: status,
	}
	mock.lockUpdateTransactionStatus.Lock()
	mock.calls.UpdateTransactionStatus = append(mock.calls.UpdateTransactionStatus, callInfo)
	mock.lockUpdateTransactionStatus.Unlock()
	if mock.UpdateTransactionStatusFunc == nil {
		var (
			transactionOut entities.Transaction
			errOut         error
		)
		return transactionOut, errOut
	}
	return mock.UpdateTransactionStatusFunc(ctx, id, status)
}

// UpdateTransactionStatusCalls gets all the calls that were made to UpdateTransactionStatus.
// Check the length with:
//
//	len(mockedTransactionRepository.UpdateTransactionStatusCalls())
func (mock *TransactionRepositoryMock) UpdateTransactionStatusCalls() []struct {
	Ctx    context.Context
	ID     string
	Status entities.TransactionStatus
} {
	var calls []struct {
		Ctx    context.Context
		ID     string
		Status entities.TransactionStatus
	}
	mock.lockUpdateTransactionStatus.RLock()
	calls = mock.calls.UpdateTransactionStatus
	mock.lockUpdateTransactionStatus.RUnlock()
	return calls
}
