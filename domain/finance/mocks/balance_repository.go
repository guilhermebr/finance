// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"finance/domain/entities"
	"sync"
)

// BalanceRepositoryMock is a mock implementation of finance.BalanceRepository.
//
//	func TestSomethingThatUsesBalanceRepository(t *testing.T) {
//
//		// make and configure a mocked finance.BalanceRepository
//		mockedBalanceRepository := &BalanceRepositoryMock{
//			GetAllBalancesFunc: func(ctx context.Context) ([]entities.Balance, error) {
//				panic("mock out the GetAllBalances method")
//			},
//			GetBalanceByAccountIDFunc: func(ctx context.Context, accountID string) (entities.Balance, error) {
//				panic("mock out the GetBalanceByAccountID method")
//			},
//			GetBalanceSummaryFunc: func(ctx context.Context) (entities.BalanceSummary, error) {
//				panic("mock out the GetBalanceSummary method")
//			},
//			RefreshAccountBalanceFunc: func(ctx context.Context, accountID string) error {
//				panic("mock out the RefreshAccountBalance method")
//			},
//		}
//
//		// use mockedBalanceRepository in code that requires finance.BalanceRepository
//		// and then make assertions.
//
//	}
type BalanceRepositoryMock struct {
	// GetAllBalancesFunc mocks the GetAllBalances method.
	GetAllBalancesFunc func(ctx context.Context) ([]entities.Balance, error)

	// GetBalanceByAccountIDFunc mocks the GetBalanceByAccountID method.
	GetBalanceByAccountIDFunc func(ctx context.Context, accountID string) (entities.Balance, error)

	// GetBalanceSummaryFunc mocks the GetBalanceSummary method.
	GetBalanceSummaryFunc func(ctx context.Context) (entities.BalanceSummary, error)

	// RefreshAccountBalanceFunc mocks the RefreshAccountBalance method.
	RefreshAccountBalanceFunc func(ctx context.Context, accountID string) error

	// calls tracks calls to the methods.
	calls struct {
		// GetAllBalances holds details about calls to the GetAllBalances method.
		GetAllBalances []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetBalanceByAccountID holds details about calls to the GetBalanceByAccountID method.
		GetBalanceByAccountID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
		}
		// GetBalanceSummary holds details about calls to the GetBalanceSummary method.
		GetBalanceSummary []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// RefreshAccountBalance holds details about calls to the RefreshAccountBalance method.
		RefreshAccountBalance []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
		}
	}
	lockGetAllBalances        sync.RWMutex
	lockGetBalanceByAccountID sync.RWMutex
	lockGetBalanceSummary     sync.RWMutex
	lockRefreshAccountBalance sync.RWMutex
}

// GetAllBalances calls GetAllBalancesFunc.
func (mock *BalanceRepositoryMock) GetAllBalances(ctx context.Context) ([]entities.Balance, error) {
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAllBalances.Lock()
	mock.calls.GetAllBalances = append(mock.calls.GetAllBalances, callInfo)
	mock.lockGetAllBalances.Unlock()
	if mock.GetAllBalancesFunc == nil {
		var (
			balancesOut []entities.Balance
			errOut      error
		)
		return balancesOut, errOut
	}
	return mock.GetAllBalancesFunc(ctx)
}

// GetAllBalancesCalls gets all the calls that were made to GetAllBalances.
// Check the length with:
//
//	len(mockedBalanceRepository.GetAllBalancesCalls())
func (mock *BalanceRepositoryMock) GetAllBalancesCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAllBalances.RLock()
	calls = mock.calls.GetAllBalances
	mock.lockGetAllBalances.RUnlock()
	return calls
}

// GetBalanceByAccountID calls GetBalanceByAccountIDFunc.
func (mock *BalanceRepositoryMock) GetBalanceByAccountID(ctx context.Context, accountID string) (entities.Balance, error) {
	callInfo := struct {
		Ctx       context.Context
		AccountID string
	}{
		Ctx:       ctx,
		AccountID: accountID,
	}
	mock.lockGetBalanceByAccountID.Lock()
	mock.calls.GetBalanceByAccountID = append(mock.calls.GetBalanceByAccountID, callInfo)
	mock.lockGetBalanceByAccountID.Unlock()
	if mock.GetBalanceByAccountIDFunc == nil {
		var (
			balanceOut entities.Balance
			errOut     error
		)
		return balanceOut, errOut
	}
	return mock.GetBalanceByAccountIDFunc(ctx, accountID)
}

// GetBalanceByAccountIDCalls gets all the calls that were made to GetBalanceByAccountID.
// Check the length with:
//
//	len(mockedBalanceRepository.GetBalanceByAccountIDCalls())
func (mock *BalanceRepositoryMock) GetBalanceByAccountIDCalls() []struct {
	Ctx       context.Context
	AccountID string
} {
	var calls []struct {
		Ctx       context.Context
		AccountID string
	}
	mock.lockGetBalanceByAccountID.RLock()
	calls = mock.calls.GetBalanceByAccountID
	mock.lockGetBalanceByAccountID.RUnlock()
	return calls
}

// GetBalanceSummary calls GetBalanceSummaryFunc.
func (mock *BalanceRepositoryMock) GetBalanceSummary(ctx context.Context) (entities.BalanceSummary, error) {
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetBalanceSummary.Lock()
	mock.calls.GetBalanceSummary = append(mock.calls.GetBalanceSummary, callInfo)
	mock.lockGetBalanceSummary.Unlock()
	if mock.GetBalanceSummaryFunc == nil {
		var (
			balanceSummaryOut entities.BalanceSummary
			errOut            error
		)
		return balanceSummaryOut, errOut
	}
	return mock.GetBalanceSummaryFunc(ctx)
}

// GetBalanceSummaryCalls gets all the calls that were made to GetBalanceSummary.
// Check the length with:
//
//	len(mockedBalanceRepository.GetBalanceSummaryCalls())
func (mock *BalanceRepositoryMock) GetBalanceSummaryCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetBalanceSummary.RLock()
	calls = mock.calls.GetBalanceSummary
	mock.lockGetBalanceSummary.RUnlock()
	return calls
}

// RefreshAccountBalance calls RefreshAccountBalanceFunc.
func (mock *BalanceRepositoryMock) RefreshAccountBalance(ctx context.Context, accountID string) error {
	callInfo := struct {
		Ctx       context.Context
		AccountID string
	}{
		Ctx:       ctx,
		AccountID: accountID,
	}
	mock.lockRefreshAccountBalance.Lock()
	mock.calls.RefreshAccountBalance = append(mock.calls.RefreshAccountBalance, callInfo)
	mock.lockRefreshAccountBalance.Unlock()
	if mock.RefreshAccountBalanceFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.RefreshAccountBalanceFunc(ctx, accountID)
}

// RefreshAccountBalanceCalls gets all the calls that were made to RefreshAccountBalance.
// Check the length with:
//
//	len(mockedBalanceRepository.RefreshAccountBalanceCalls())
func (mock *BalanceRepositoryMock) RefreshAccountBalanceCalls() []struct {
	Ctx       context.Context
	AccountID string
} {
	var calls []struct {
		Ctx       context.Context
		AccountID string
	}
	mock.lockRefreshAccountBalance.RLock()
	calls = mock.calls.RefreshAccountBalance
	mock.lockRefreshAccountBalance.RUnlock()
	return calls
}
