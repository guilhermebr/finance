// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"finance/domain/entities"
	"sync"
)

// AccountUseCaseMock is a mock implementation of v1.AccountUseCase.
//
//	func TestSomethingThatUsesAccountUseCase(t *testing.T) {
//
//		// make and configure a mocked v1.AccountUseCase
//		mockedAccountUseCase := &AccountUseCaseMock{
//			CreateAccountFunc: func(ctx context.Context, account entities.Account) (entities.Account, error) {
//				panic("mock out the CreateAccount method")
//			},
//			DeleteAccountFunc: func(ctx context.Context, id string) error {
//				panic("mock out the DeleteAccount method")
//			},
//			GetAccountByIDFunc: func(ctx context.Context, id string) (entities.Account, error) {
//				panic("mock out the GetAccountByID method")
//			},
//			GetAllAccountsFunc: func(ctx context.Context) ([]entities.Account, error) {
//				panic("mock out the GetAllAccounts method")
//			},
//			UpdateAccountFunc: func(ctx context.Context, account entities.Account) (entities.Account, error) {
//				panic("mock out the UpdateAccount method")
//			},
//		}
//
//		// use mockedAccountUseCase in code that requires v1.AccountUseCase
//		// and then make assertions.
//
//	}
type AccountUseCaseMock struct {
	// CreateAccountFunc mocks the CreateAccount method.
	CreateAccountFunc func(ctx context.Context, account entities.Account) (entities.Account, error)

	// DeleteAccountFunc mocks the DeleteAccount method.
	DeleteAccountFunc func(ctx context.Context, id string) error

	// GetAccountByIDFunc mocks the GetAccountByID method.
	GetAccountByIDFunc func(ctx context.Context, id string) (entities.Account, error)

	// GetAllAccountsFunc mocks the GetAllAccounts method.
	GetAllAccountsFunc func(ctx context.Context) ([]entities.Account, error)

	// UpdateAccountFunc mocks the UpdateAccount method.
	UpdateAccountFunc func(ctx context.Context, account entities.Account) (entities.Account, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateAccount holds details about calls to the CreateAccount method.
		CreateAccount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Account is the account argument value.
			Account entities.Account
		}
		// DeleteAccount holds details about calls to the DeleteAccount method.
		DeleteAccount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetAccountByID holds details about calls to the GetAccountByID method.
		GetAccountByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetAllAccounts holds details about calls to the GetAllAccounts method.
		GetAllAccounts []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// UpdateAccount holds details about calls to the UpdateAccount method.
		UpdateAccount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Account is the account argument value.
			Account entities.Account
		}
	}
	lockCreateAccount  sync.RWMutex
	lockDeleteAccount  sync.RWMutex
	lockGetAccountByID sync.RWMutex
	lockGetAllAccounts sync.RWMutex
	lockUpdateAccount  sync.RWMutex
}

// CreateAccount calls CreateAccountFunc.
func (mock *AccountUseCaseMock) CreateAccount(ctx context.Context, account entities.Account) (entities.Account, error) {
	callInfo := struct {
		Ctx     context.Context
		Account entities.Account
	}{
		Ctx:     ctx,
		Account: account,
	}
	mock.lockCreateAccount.Lock()
	mock.calls.CreateAccount = append(mock.calls.CreateAccount, callInfo)
	mock.lockCreateAccount.Unlock()
	if mock.CreateAccountFunc == nil {
		var (
			accountOut entities.Account
			errOut     error
		)
		return accountOut, errOut
	}
	return mock.CreateAccountFunc(ctx, account)
}

// CreateAccountCalls gets all the calls that were made to CreateAccount.
// Check the length with:
//
//	len(mockedAccountUseCase.CreateAccountCalls())
func (mock *AccountUseCaseMock) CreateAccountCalls() []struct {
	Ctx     context.Context
	Account entities.Account
} {
	var calls []struct {
		Ctx     context.Context
		Account entities.Account
	}
	mock.lockCreateAccount.RLock()
	calls = mock.calls.CreateAccount
	mock.lockCreateAccount.RUnlock()
	return calls
}

// DeleteAccount calls DeleteAccountFunc.
func (mock *AccountUseCaseMock) DeleteAccount(ctx context.Context, id string) error {
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteAccount.Lock()
	mock.calls.DeleteAccount = append(mock.calls.DeleteAccount, callInfo)
	mock.lockDeleteAccount.Unlock()
	if mock.DeleteAccountFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeleteAccountFunc(ctx, id)
}

// DeleteAccountCalls gets all the calls that were made to DeleteAccount.
// Check the length with:
//
//	len(mockedAccountUseCase.DeleteAccountCalls())
func (mock *AccountUseCaseMock) DeleteAccountCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockDeleteAccount.RLock()
	calls = mock.calls.DeleteAccount
	mock.lockDeleteAccount.RUnlock()
	return calls
}

// GetAccountByID calls GetAccountByIDFunc.
func (mock *AccountUseCaseMock) GetAccountByID(ctx context.Context, id string) (entities.Account, error) {
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetAccountByID.Lock()
	mock.calls.GetAccountByID = append(mock.calls.GetAccountByID, callInfo)
	mock.lockGetAccountByID.Unlock()
	if mock.GetAccountByIDFunc == nil {
		var (
			accountOut entities.Account
			errOut     error
		)
		return accountOut, errOut
	}
	return mock.GetAccountByIDFunc(ctx, id)
}

// GetAccountByIDCalls gets all the calls that were made to GetAccountByID.
// Check the length with:
//
//	len(mockedAccountUseCase.GetAccountByIDCalls())
func (mock *AccountUseCaseMock) GetAccountByIDCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetAccountByID.RLock()
	calls = mock.calls.GetAccountByID
	mock.lockGetAccountByID.RUnlock()
	return calls
}

// GetAllAccounts calls GetAllAccountsFunc.
func (mock *AccountUseCaseMock) GetAllAccounts(ctx context.Context) ([]entities.Account, error) {
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAllAccounts.Lock()
	mock.calls.GetAllAccounts = append(mock.calls.GetAllAccounts, callInfo)
	mock.lockGetAllAccounts.Unlock()
	if mock.GetAllAccountsFunc == nil {
		var (
			accountsOut []entities.Account
			errOut      error
		)
		return accountsOut, errOut
	}
	return mock.GetAllAccountsFunc(ctx)
}

// GetAllAccountsCalls gets all the calls that were made to GetAllAccounts.
// Check the length with:
//
//	len(mockedAccountUseCase.GetAllAccountsCalls())
func (mock *AccountUseCaseMock) GetAllAccountsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAllAccounts.RLock()
	calls = mock.calls.GetAllAccounts
	mock.lockGetAllAccounts.RUnlock()
	return calls
}

// UpdateAccount calls UpdateAccountFunc.
func (mock *AccountUseCaseMock) UpdateAccount(ctx context.Context, account entities.Account) (entities.Account, error) {
	callInfo := struct {
		Ctx     context.Context
		Account entities.Account
	}{
		Ctx:     ctx,
		Account: account,
	}
	mock.lockUpdateAccount.Lock()
	mock.calls.UpdateAccount = append(mock.calls.UpdateAccount, callInfo)
	mock.lockUpdateAccount.Unlock()
	if mock.UpdateAccountFunc == nil {
		var (
			accountOut entities.Account
			errOut     error
		)
		return accountOut, errOut
	}
	return mock.UpdateAccountFunc(ctx, account)
}

// UpdateAccountCalls gets all the calls that were made to UpdateAccount.
// Check the length with:
//
//	len(mockedAccountUseCase.UpdateAccountCalls())
func (mock *AccountUseCaseMock) UpdateAccountCalls() []struct {
	Ctx     context.Context
	Account entities.Account
} {
	var calls []struct {
		Ctx     context.Context
		Account entities.Account
	}
	mock.lockUpdateAccount.RLock()
	calls = mock.calls.UpdateAccount
	mock.lockUpdateAccount.RUnlock()
	return calls
}
