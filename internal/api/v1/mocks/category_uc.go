// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"finance/domain/entities"
	"sync"
)

// CategoryUseCaseMock is a mock implementation of v1.CategoryUseCase.
//
//	func TestSomethingThatUsesCategoryUseCase(t *testing.T) {
//
//		// make and configure a mocked v1.CategoryUseCase
//		mockedCategoryUseCase := &CategoryUseCaseMock{
//			CreateCategoryFunc: func(ctx context.Context, category entities.Category) (entities.Category, error) {
//				panic("mock out the CreateCategory method")
//			},
//			DeleteCategoryFunc: func(ctx context.Context, id string) error {
//				panic("mock out the DeleteCategory method")
//			},
//			GetAllCategoriesFunc: func(ctx context.Context) ([]entities.Category, error) {
//				panic("mock out the GetAllCategories method")
//			},
//			GetCategoryByIDFunc: func(ctx context.Context, id string) (entities.Category, error) {
//				panic("mock out the GetCategoryByID method")
//			},
//			UpdateCategoryFunc: func(ctx context.Context, category entities.Category) (entities.Category, error) {
//				panic("mock out the UpdateCategory method")
//			},
//		}
//
//		// use mockedCategoryUseCase in code that requires v1.CategoryUseCase
//		// and then make assertions.
//
//	}
type CategoryUseCaseMock struct {
	// CreateCategoryFunc mocks the CreateCategory method.
	CreateCategoryFunc func(ctx context.Context, category entities.Category) (entities.Category, error)

	// DeleteCategoryFunc mocks the DeleteCategory method.
	DeleteCategoryFunc func(ctx context.Context, id string) error

	// GetAllCategoriesFunc mocks the GetAllCategories method.
	GetAllCategoriesFunc func(ctx context.Context) ([]entities.Category, error)

	// GetCategoryByIDFunc mocks the GetCategoryByID method.
	GetCategoryByIDFunc func(ctx context.Context, id string) (entities.Category, error)

	// UpdateCategoryFunc mocks the UpdateCategory method.
	UpdateCategoryFunc func(ctx context.Context, category entities.Category) (entities.Category, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateCategory holds details about calls to the CreateCategory method.
		CreateCategory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Category is the category argument value.
			Category entities.Category
		}
		// DeleteCategory holds details about calls to the DeleteCategory method.
		DeleteCategory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetAllCategories holds details about calls to the GetAllCategories method.
		GetAllCategories []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetCategoryByID holds details about calls to the GetCategoryByID method.
		GetCategoryByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// UpdateCategory holds details about calls to the UpdateCategory method.
		UpdateCategory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Category is the category argument value.
			Category entities.Category
		}
	}
	lockCreateCategory   sync.RWMutex
	lockDeleteCategory   sync.RWMutex
	lockGetAllCategories sync.RWMutex
	lockGetCategoryByID  sync.RWMutex
	lockUpdateCategory   sync.RWMutex
}

// CreateCategory calls CreateCategoryFunc.
func (mock *CategoryUseCaseMock) CreateCategory(ctx context.Context, category entities.Category) (entities.Category, error) {
	callInfo := struct {
		Ctx      context.Context
		Category entities.Category
	}{
		Ctx:      ctx,
		Category: category,
	}
	mock.lockCreateCategory.Lock()
	mock.calls.CreateCategory = append(mock.calls.CreateCategory, callInfo)
	mock.lockCreateCategory.Unlock()
	if mock.CreateCategoryFunc == nil {
		var (
			categoryOut entities.Category
			errOut      error
		)
		return categoryOut, errOut
	}
	return mock.CreateCategoryFunc(ctx, category)
}

// CreateCategoryCalls gets all the calls that were made to CreateCategory.
// Check the length with:
//
//	len(mockedCategoryUseCase.CreateCategoryCalls())
func (mock *CategoryUseCaseMock) CreateCategoryCalls() []struct {
	Ctx      context.Context
	Category entities.Category
} {
	var calls []struct {
		Ctx      context.Context
		Category entities.Category
	}
	mock.lockCreateCategory.RLock()
	calls = mock.calls.CreateCategory
	mock.lockCreateCategory.RUnlock()
	return calls
}

// DeleteCategory calls DeleteCategoryFunc.
func (mock *CategoryUseCaseMock) DeleteCategory(ctx context.Context, id string) error {
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteCategory.Lock()
	mock.calls.DeleteCategory = append(mock.calls.DeleteCategory, callInfo)
	mock.lockDeleteCategory.Unlock()
	if mock.DeleteCategoryFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeleteCategoryFunc(ctx, id)
}

// DeleteCategoryCalls gets all the calls that were made to DeleteCategory.
// Check the length with:
//
//	len(mockedCategoryUseCase.DeleteCategoryCalls())
func (mock *CategoryUseCaseMock) DeleteCategoryCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockDeleteCategory.RLock()
	calls = mock.calls.DeleteCategory
	mock.lockDeleteCategory.RUnlock()
	return calls
}

// GetAllCategories calls GetAllCategoriesFunc.
func (mock *CategoryUseCaseMock) GetAllCategories(ctx context.Context) ([]entities.Category, error) {
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAllCategories.Lock()
	mock.calls.GetAllCategories = append(mock.calls.GetAllCategories, callInfo)
	mock.lockGetAllCategories.Unlock()
	if mock.GetAllCategoriesFunc == nil {
		var (
			categorysOut []entities.Category
			errOut       error
		)
		return categorysOut, errOut
	}
	return mock.GetAllCategoriesFunc(ctx)
}

// GetAllCategoriesCalls gets all the calls that were made to GetAllCategories.
// Check the length with:
//
//	len(mockedCategoryUseCase.GetAllCategoriesCalls())
func (mock *CategoryUseCaseMock) GetAllCategoriesCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAllCategories.RLock()
	calls = mock.calls.GetAllCategories
	mock.lockGetAllCategories.RUnlock()
	return calls
}

// GetCategoryByID calls GetCategoryByIDFunc.
func (mock *CategoryUseCaseMock) GetCategoryByID(ctx context.Context, id string) (entities.Category, error) {
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetCategoryByID.Lock()
	mock.calls.GetCategoryByID = append(mock.calls.GetCategoryByID, callInfo)
	mock.lockGetCategoryByID.Unlock()
	if mock.GetCategoryByIDFunc == nil {
		var (
			categoryOut entities.Category
			errOut      error
		)
		return categoryOut, errOut
	}
	return mock.GetCategoryByIDFunc(ctx, id)
}

// GetCategoryByIDCalls gets all the calls that were made to GetCategoryByID.
// Check the length with:
//
//	len(mockedCategoryUseCase.GetCategoryByIDCalls())
func (mock *CategoryUseCaseMock) GetCategoryByIDCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetCategoryByID.RLock()
	calls = mock.calls.GetCategoryByID
	mock.lockGetCategoryByID.RUnlock()
	return calls
}

// UpdateCategory calls UpdateCategoryFunc.
func (mock *CategoryUseCaseMock) UpdateCategory(ctx context.Context, category entities.Category) (entities.Category, error) {
	callInfo := struct {
		Ctx      context.Context
		Category entities.Category
	}{
		Ctx:      ctx,
		Category: category,
	}
	mock.lockUpdateCategory.Lock()
	mock.calls.UpdateCategory = append(mock.calls.UpdateCategory, callInfo)
	mock.lockUpdateCategory.Unlock()
	if mock.UpdateCategoryFunc == nil {
		var (
			categoryOut entities.Category
			errOut      error
		)
		return categoryOut, errOut
	}
	return mock.UpdateCategoryFunc(ctx, category)
}

// UpdateCategoryCalls gets all the calls that were made to UpdateCategory.
// Check the length with:
//
//	len(mockedCategoryUseCase.UpdateCategoryCalls())
func (mock *CategoryUseCaseMock) UpdateCategoryCalls() []struct {
	Ctx      context.Context
	Category entities.Category
} {
	var calls []struct {
		Ctx      context.Context
		Category entities.Category
	}
	mock.lockUpdateCategory.RLock()
	calls = mock.calls.UpdateCategory
	mock.lockUpdateCategory.RUnlock()
	return calls
}
